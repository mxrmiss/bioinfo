cat("✅ 所有必要的R包已成功加载！\n")
################################################################################
#
#                    脚本 2: GO/KEGG 富集分析 (优化版)
#
# 目的:
#   - 高效地读取预处理的基因注释文件。
#   - 读取用户的差异表达基因（DEG）和背景基因列表。
#   - 执行 GO 和 KEGG 富集分析。
#   - 将分析结果（表格和可视化图表）保存到指定目录。
#
# 作者: [你的名字]
# 日期: 2025-08-16
#
# 使用方法:
#   1. 确保 R 环境已安装 'pacman' 包 (install.packages("pacman"))。
#   2. 在脚本同级目录下创建 'inmaterial' 和 'oumaterial' 文件夹。
#   3. 将以下文件放入 'inmaterial' 文件夹:
#      - 'parsed_gene_go_annotation.tsv'
#      - 'parsed_gene_kegg_annotation.tsv'
#      - 'DEG_genes.txt'
#      - 'all_genes.txt'
#   4. 直接运行此脚本，所有结果将自动保存在 'oumaterial' 文件夹。
#
################################################################################
#==============================================================================
# 步骤 0: 全局配置与环境准备
#==============================================================================
# --- 核心配置区 ---
# 用户可在此处修改输入输出目录和文件名
INPUT_DIR  <- "inmaterial"
OUTPUT_DIR <- "oumaterial"
# 输入文件名
GO_ANNO_FILE   <- "parsed_gene_go_annotation.tsv"
KEGG_ANNO_FILE <- "parsed_gene_kegg_annotation.tsv"
DEG_GENE_FILE  <- "DEG_genes.txt"
ALL_GENE_FILE  <- "all_genes.txt"
# 富集分析参数
P_ADJUST_METHOD <- "BH"
P_VALUE_CUTOFF  <- 0.05
Q_VALUE_CUTOFF  <- 0.2
# 可视化参数
SHOW_CATEGORY_NUM <- 15 # 图表中展示的条目数量
# --- 自动安装和加载R包 ---
# pacman包可以自动处理包的安装和加载，使代码更整洁
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pacman::p_load(clusterProfiler, enrichplot, dplyr, ggplot2, data.table)
# 设置下载超时，防止因网络问题导致Bioconductor包安装失败
options(timeout = 300)
cat("✅ 所有必要的R包已成功加载！\n")
#==============================================================================
# 步骤 1: 定义核心功能函数
#==============================================================================
#' @title 安全地加载数据文件
#' @description 检查文件是否存在，然后使用高效的data.table::fread读取。
#' @param file_path 文件的完整路径。
#' @param is_gene_list 布尔值，如果为TRUE，则只读取第一列作为基因列表。
#' @return 返回一个data.frame或字符向量。
load_data <- function(file_path, is_gene_list = FALSE) {
if (!file.exists(file_path)) {
stop(paste("❌ 错误：必需的输入文件不存在，请检查路径:", file_path))
}
cat(paste0("  - 正在加载: ", basename(file_path), "...\n"))
if (is_gene_list) {
return(fread(file_path, header = FALSE, stringsAsFactors = FALSE)$V1)
} else {
return(as.data.frame(fread(file_path, header = TRUE, stringsAsFactors = FALSE)))
}
}
#' @title 执行并保存富集分析结果
#' @description 封装了富集分析、结果保存（表格和图片）的通用流程。
#' @param enrichment_type 分析类型，"GO" 或 "KEGG"。
#' @param enrichment_result clusterProfiler的富集分析结果对象。
#' @param output_dir 输出目录路径。
save_enrichment_results <- function(enrichment_type, enrichment_result, output_dir) {
if (is.null(enrichment_result) || nrow(enrichment_result@result) == 0) {
cat(paste0("⚠️  ", enrichment_type, " 富集分析没有发现任何显著富集的条目，跳过结果保存。\n"))
return()
}
cat(paste0("  - 正在保存 ", enrichment_type, " 富集分析结果...\n"))
# 1. 保存结果表格
result_df <- as.data.frame(enrichment_result)
table_filename <- file.path(output_dir, paste0(enrichment_type, "_enrichment_results.tsv"))
write.table(result_df, table_filename, sep = "\t", row.names = FALSE, quote = FALSE)
cat(paste0("    - 结果表格已保存到: ", table_filename, "\n"))
# 2. 生成并保存条形图
p_bar <- barplot(enrichment_result, showCategory = SHOW_CATEGORY_NUM) +
ggtitle(paste(enrichment_type, "Enrichment Barplot"))
bar_filename <- file.path(output_dir, paste0(enrichment_type, "_barplot.png"))
ggsave(bar_filename, p_bar, width = 10, height = 8, dpi = 300)
cat(paste0("    - 条形图已保存到: ", bar_filename, "\n"))
# 3. 生成并保存气泡图
p_dot <- dotplot(enrichment_result, showCategory = SHOW_CATEGORY_NUM) +
ggtitle(paste(enrichment_type, "Enrichment Dotplot"))
dot_filename <- file.path(output_dir, paste0(enrichment_type, "_dotplot.png"))
ggsave(dot_filename, p_dot, width = 10, height = 8, dpi = 300)
cat(paste0("    - 气泡图已保存到: ", dot_filename, "\n"))
}
#==============================================================================
# 步骤 2: 数据加载
#==============================================================================
cat("\n--- [步骤 1/4] 开始加载所有输入文件 ---\n")
# --- 检查并创建输出目录 ---
if (!dir.exists(OUTPUT_DIR)) {
dir.create(OUTPUT_DIR, recursive = TRUE)
cat(paste("📂 输出目录 '", OUTPUT_DIR, "' 已创建。\n", sep=""))
}
# --- 构建文件路径并加载数据 ---
gene_to_go   <- load_data(file.path(INPUT_DIR, GO_ANNO_FILE))
gene_to_kegg <- load_data(file.path(INPUT_DIR, KEGG_ANNO_FILE))
deg_genes    <- load_data(file.path(INPUT_DIR, DEG_GENE_FILE), is_gene_list = TRUE)
all_genes    <- load_data(file.path(INPUT_DIR, ALL_GENE_FILE), is_gene_list = TRUE)
cat("✅ 所有数据文件已成功加载！\n")
#==============================================================================
# 步骤 3: 执行 GO 富集分析
#==============================================================================
cat("\n--- [步骤 2/4] 正在进行 GO 富集分析 ---\n")
# 3.1 准备 enricher 函数需要的 TERM2GENE 格式
go_term2gene <- gene_to_go %>%
dplyr::select(GO_ID, GeneID) %>%
filter(GO_ID != "" & !is.na(GO_ID)) # 增加一步过滤，确保GO_ID有效
# 3.2 运行富集分析
ego_result <- enricher(
gene          = deg_genes,
TERM2GENE     = go_term2gene,
universe      = all_genes,
pAdjustMethod = P_ADJUST_METHOD,
pvalueCutoff  = P_VALUE_CUTOFF,
qvalueCutoff  = Q_VALUE_CUTOFF
)
# 3.3 查看并保存结果
cat("GO富集分析完成。结果摘要：\n")
if (!is.null(ego_result)) print(head(as.data.frame(ego_result)))
save_enrichment_results("GO", ego_result, OUTPUT_DIR)
#==============================================================================
# 步骤 4: 执行 KEGG 富集分析
#==============================================================================
cat("\n--- [步骤 3/4] 正在进行 KEGG 富集分析 ---\n")
# 4.1 准备 enrichKEGG 需要的基因和背景 KO 列表
# 使用 filter 和 pull 链式操作，代码更清晰
de_ko <- gene_to_kegg %>%
filter(GeneID %in% deg_genes, !is.na(KO_ID), KO_ID != "") %>%
pull(KO_ID) %>%
unique()
universe_ko <- gene_to_kegg %>%
filter(GeneID %in% all_genes, !is.na(KO_ID), KO_ID != "") %>%
pull(KO_ID) %>%
unique()
# 4.2 运行富集分析 (增加tryCatch以捕获可能的网络错误)
ekk_result <- NULL # 初始化为NULL
if (length(de_ko) > 0) {
tryCatch({
ekk_result <- enrichKEGG(
gene          = de_ko,
organism      = 'ko', # 关键参数，表明使用KO数据库
universe      = universe_ko,
pAdjustMethod = P_ADJUST_METHOD,
pvalueCutoff  = P_VALUE_CUTOFF,
qvalueCutoff  = Q_VALUE_CUTOFF
)
}, error = function(e) {
cat("❌ KEGG 富集分析过程中发生错误 (可能是网络问题):\n")
print(e$message)
})
} else {
cat("⚠️  差异基因未能映射到任何KO条目，无法进行KEGG富集分析。\n")
}
# 4.3 查看并保存结果
cat("KEGG富集分析完成。结果摘要：\n")
if (!is.null(ekk_result)) print(head(as.data.frame(ekk_result)))
save_enrichment_results("KEGG", ekk_result, OUTPUT_DIR)
#==============================================================================
# 脚本结束
#==============================================================================
cat("\n--- [步骤 4/4] 脚本运行完毕 ---\n")
cat("🎉 全部富集分析和可视化已完成！请检查 '", OUTPUT_DIR, "' 文件夹获取结果。\n")
################################################################################
